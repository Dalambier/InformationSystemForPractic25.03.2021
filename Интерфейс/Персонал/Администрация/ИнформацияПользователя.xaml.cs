using Microsoft.Win32;
using System.IO;
using System.Linq;
using System.Windows;
using System.Windows.Input;
using System.Windows.Media.Imaging;

namespace Государственный_заказ_Челябинской_области.Интерфейс.Персонал.Администрация
{
    /// <summary>
    /// Форма показа информации о пользователе
    /// </summary>
    public partial class ИнформацияПользователя : Window
    {
        Модели.ПараметрыСоединенияБазыДанных БазаДанных = new Модели.ПараметрыСоединенияБазыДанных();
        public ИнформацияПользователя()
        {
            InitializeComponent();
            var ПользовательскаяСтрока = БазаДанных.Пользователи.First(x => x.id == Классы.ХранимаяИнформация.ИдентификаторВыбранногоПользователя_Администратор);
            var НепреобразованныйАватар = ПользовательскаяСтрока.Аватар;
            BitmapImage ПреобразованныйАватар = new BitmapImage();
            ПреобразованныйАватар.BeginInit();
            ПреобразованныйАватар.StreamSource = new MemoryStream(НепреобразованныйАватар);
            ПреобразованныйАватар.EndInit();
            АватарПользователя.Source = ПреобразованныйАватар;
            Имя.Text = ПользовательскаяСтрока.Имя;
            Фамилия.Text = ПользовательскаяСтрока.Фамилия;
            ИНН.Text = ПользовательскаяСтрока.ИНН;
            СерияПаспорта.Text = ПользовательскаяСтрока.Серия_паспорта;
            НомерПаспорта.Text = ПользовательскаяСтрока.Номер_паспорта;
            ЭлектроннаяПочта.Text = ПользовательскаяСтрока.Электронная_почта;
            ДатаРегистрации.Text = ПользовательскаяСтрока.Дата_регистрации;
            Логин.Text = ПользовательскаяСтрока.Логин;
            Пароль.Text = ПользовательскаяСтрока.Пароль;
        }
        private void ИзменитьДанныеПользователя(object sender, RoutedEventArgs e)
        {
            var СтрокаПользователя = БазаДанных.Пользователи.First(x => x.id == Классы.ХранимаяИнформация.ИдентификаторВыбранногоПользователя_Администратор);
            СтрокаПользователя.Имя = Имя.Text;
            СтрокаПользователя.Фамилия = Фамилия.Text;
            СтрокаПользователя.ИНН = ИНН.Text;
            СтрокаПользователя.Номер_паспорта = НомерПаспорта.Text;
            СтрокаПользователя.Серия_паспорта = СерияПаспорта.Text;
            СтрокаПользователя.Электронная_почта = ЭлектроннаяПочта.Text;
            СтрокаПользователя.Логин = Логин.Text;
            СтрокаПользователя.Пароль = Пароль.Text;
            СтрокаПользователя.Дата_регистрации = ДатаРегистрации.Text;
            БазаДанных.SaveChanges();
            MessageBox.Show("Данные пользователя обновлены", "Информация", MessageBoxButton.OK, MessageBoxImage.Information);
        }

        private void УдалитьПользователя(object sender, RoutedEventArgs e)
        {
            var СтрокаПользователя = БазаДанных.Пользователи.First(x => x.id == Классы.ХранимаяИнформация.ИдентификаторВыбранногоПользователя_Администратор);
            int КоличествоДоговоровУПользователя = БазаДанных.Договоры.Where(x => x.Выполнитель == Классы.ХранимаяИнформация.ИдентификаторВыбранногоПользователя_Администратор || x.Заказчик == Классы.ХранимаяИнформация.ИдентификаторВыбранногоПользователя_Администратор).Count();
            for (int i = 0; i < КоличествоДоговоровУПользователя; i++)
            {
                var ДоговорПользователя = БазаДанных.Договоры.First(x => x.Выполнитель == Классы.ХранимаяИнформация.ИдентификаторВыбранногоПользователя_Администратор || x.Заказчик == Классы.ХранимаяИнформация.ИдентификаторВыбранногоПользователя_Администратор);
                БазаДанных.Договоры.Remove(ДоговорПользователя);
                БазаДанных.SaveChanges();
            }

            int КоличествоЗаказовУПользователя = БазаДанных.Заказы.Where(x => x.Выполнитель == Классы.ХранимаяИнформация.ИдентификаторВыбранногоПользователя_Администратор || x.Объявитель == Классы.ХранимаяИнформация.ИдентификаторВыбранногоПользователя_Администратор).Count();
            for (int i = 0; i < КоличествоЗаказовУПользователя; i++)
            {
                var ЗаказПользователя = БазаДанных.Заказы.First(x => x.Выполнитель == Классы.ХранимаяИнформация.ИдентификаторВыбранногоПользователя_Администратор || x.Объявитель == Классы.ХранимаяИнформация.ИдентификаторВыбранногоПользователя_Администратор);
                БазаДанных.Заказы.Remove(ЗаказПользователя);
                БазаДанных.SaveChanges();
            }
            БазаДанных.Пользователи.Remove(СтрокаПользователя);
            БазаДанных.SaveChanges();
            MessageBox.Show("Пользователь удалён", "Информация", MessageBoxButton.OK, MessageBoxImage.Information);
            this.Close();
        }

        private void АватарПользователя_Поменять(object sender, MouseButtonEventArgs e)
        {
            OpenFileDialog ДиалогОткрытияКартинки = new OpenFileDialog
            {
                Filter = "Файлы изображений (*.bmp, *.jpg, *.jpeg, *.png)|*.bmp;*.jpg;*.jpeg;*.png"
            };
            if (ДиалогОткрытияКартинки.ShowDialog() == true)
            {
                string ПутьДоКартинки = ДиалогОткрытияКартинки.FileName;
                БазаДанных.Database.ExecuteSqlCommand("UPDATE Пользователи SET Аватар = (SELECT * FROM OPENROWSET(BULK '" + ПутьДоКартинки + "', SINGLE_BLOB) AS image) WHERE id = '" + Классы.ХранимаяИнформация.ИдентификаторВыбранногоПользователя_Администратор + "'");
                БазаДанных.SaveChanges();
                Модели.ПараметрыСоединенияБазыДанных ОбновллённаяБазаДанных = new Модели.ПараметрыСоединенияБазыДанных();
                var ПользовательскаяСтрока = ОбновллённаяБазаДанных.Пользователи.First(x => x.id == Классы.ХранимаяИнформация.ИдентификаторВыбранногоПользователя_Администратор);
                var НепреобразованныйАватар = ПользовательскаяСтрока.Аватар;
                BitmapImage ПреобразованныйАватар = new BitmapImage();
                ПреобразованныйАватар.BeginInit();
                ПреобразованныйАватар.StreamSource = new MemoryStream(НепреобразованныйАватар);
                ПреобразованныйАватар.EndInit();
                АватарПользователя.Source = ПреобразованныйАватар;
            }
        }
    }
}
